// <auto-generated />
using System;
using API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(LawerDataContext))]
    [Migration("20230612162913_TaskMigration")]
    partial class TaskMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Models.BillingGroup", b =>
                {
                    b.Property<decimal>("Amount")
                        .HasColumnType("money")
                        .HasColumnName("amount");

                    b.Property<int>("BillToContactId")
                        .HasColumnType("int")
                        .HasColumnName("bill_to_contact_id");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("LastRun")
                        .HasColumnType("datetime")
                        .HasColumnName("last_run");

                    b.Property<DateTime?>("NextRun")
                        .HasColumnType("datetime")
                        .HasColumnName("next_run");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.ToTable("billing_group", (string)null);
                });

            modelBuilder.Entity("API.Models.BillingRate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("money")
                        .HasColumnName("price_per_unit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("billing_rates_pkey");

                    b.ToTable("billing_rate", (string)null);
                });

            modelBuilder.Entity("API.Models.ClientCare", b =>
                {
                    b.Property<long>("EocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("EOC_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EocId"));

                    b.Property<string>("CaseManager")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Case_Manager");

                    b.Property<string>("Caseload")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CASELOAD");

                    b.Property<string>("ClientStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Client_Status");

                    b.Property<string>("ClientType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Client_Type");

                    b.Property<string>("DependencyStatusBeginning")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DependencyStatusEnd")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Discharge_Date");

                    b.Property<string>("DisciplineIntake")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DISCIPLINE_INTAKE");

                    b.Property<string>("Facility")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FACILITY");

                    b.Property<DateTime>("FirstDateOfEpisode")
                        .HasColumnType("datetime")
                        .HasColumnName("First_Date_of_Episode");

                    b.Property<long?>("IntakeId")
                        .HasColumnType("bigint")
                        .HasColumnName("INTAKE_ID");

                    b.Property<long?>("NameId")
                        .HasColumnType("bigint")
                        .HasColumnName("NAME_ID");

                    b.Property<string>("NatureOfCare")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Nature_of_Care");

                    b.Property<string>("Operation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OPERATION");

                    b.Property<decimal?>("OperationCost")
                        .HasColumnType("money")
                        .HasColumnName("OPERATION_COST");

                    b.Property<string>("OverallEocStatus")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("OVERALL_EOC_STATUS");

                    b.Property<long?>("SubIntakeNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("Sub_Intake_Number");

                    b.HasKey("EocId");

                    b.ToTable("Client_Care", (string)null);
                });

            modelBuilder.Entity("API.Models.ClientMngt", b =>
                {
                    b.Property<long>("CmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CM_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CmId"));

                    b.Property<string>("CaseManager")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("Case_Manager");

                    b.Property<string>("ClientStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Client_Status");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Discharge_Date");

                    b.Property<string>("Discipline")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("EocId")
                        .HasColumnType("bigint")
                        .HasColumnName("EOC_ID");

                    b.Property<string>("Facility")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FACILITY");

                    b.Property<DateTime?>("FirstDateOfContact")
                        .HasColumnType("datetime")
                        .HasColumnName("First_Date_of_Contact");

                    b.Property<DateTime?>("FirstDateOfEpisode")
                        .HasColumnType("datetime")
                        .HasColumnName("First_Date_of_Episode");

                    b.Property<string>("FundSource")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FUND_SOURCE");

                    b.Property<string>("Operation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OPERATION");

                    b.Property<decimal?>("OperationCost")
                        .HasColumnType("money")
                        .HasColumnName("OPERATION_COST");

                    b.Property<string>("PhaseCare")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PHASE_CARE");

                    b.Property<string>("Research1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Research_1");

                    b.Property<string>("Research2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Research_2");

                    b.Property<string>("Research3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Research_3");

                    b.Property<string>("WhyReferred")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Why_referred");

                    b.Property<int?>("WorkerNumber")
                        .HasColumnType("int")
                        .HasColumnName("Worker_Number");

                    b.HasKey("CmId");

                    b.ToTable("Client_Mngt", (string)null);
                });

            modelBuilder.Entity("API.Models.Customer", b =>
                {
                    b.Property<int>("CustId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cust_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustId"));

                    b.Property<string>("CustAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Cust_Address");

                    b.Property<string>("CustCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cust_City");

                    b.Property<string>("CustEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Cust_Email");

                    b.Property<string>("CustIdNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Cust_IdNumber");

                    b.Property<string>("CustMobile")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Cust_Mobile");

                    b.Property<string>("CustName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Cust_Name");

                    b.HasKey("CustId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("API.Models.Expense", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money")
                        .HasColumnName("amount");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<DateTime>("Incurred")
                        .HasColumnType("datetime")
                        .HasColumnName("incurred");

                    b.Property<DateTime?>("Paid")
                        .HasColumnType("datetime")
                        .HasColumnName("paid");

                    b.Property<string>("Vendor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vendor");

                    b.HasKey("Id")
                        .HasName("expense_pkey");

                    b.ToTable("expense", (string)null);
                });

            modelBuilder.Entity("API.Models.ExpenseMatter", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ExpenseId")
                        .HasColumnType("int")
                        .HasColumnName("expense_id");

                    b.Property<int>("MatterId")
                        .HasColumnType("int")
                        .HasColumnName("matter_id");

                    b.HasKey("Id")
                        .HasName("expense_matter_pkey");

                    b.HasIndex("ExpenseId");

                    b.ToTable("expense_matter", (string)null);
                });

            modelBuilder.Entity("API.Models.ExternalSession", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("app_name");

                    b.Property<int>("MachineId")
                        .HasColumnType("int")
                        .HasColumnName("machine_id");

                    b.Property<int>("Timeout")
                        .HasColumnType("int")
                        .HasColumnName("timeout");

                    b.Property<int>("UserPid")
                        .HasColumnType("int")
                        .HasColumnName("user_pid");

                    b.Property<DateTime>("UtcCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("utc_created");

                    b.Property<DateTime>("UtcExpires")
                        .HasColumnType("datetime")
                        .HasColumnName("utc_expires");

                    b.HasKey("Id")
                        .HasName("external_session_pkey");

                    b.ToTable("external_session", (string)null);
                });

            modelBuilder.Entity("API.Models.Fee", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money")
                        .HasColumnName("amount");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<DateTime>("Incurred")
                        .HasColumnType("datetime")
                        .HasColumnName("incurred");

                    b.HasKey("Id")
                        .HasName("fee_pkey");

                    b.ToTable("fee", (string)null);
                });

            modelBuilder.Entity("API.Models.FeeMatter", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("FeeId")
                        .HasColumnType("int")
                        .HasColumnName("fee_id");

                    b.Property<int>("MatterId")
                        .HasColumnType("int")
                        .HasColumnName("matter_id");

                    b.HasKey("Id")
                        .HasName("fee_matter_pkey");

                    b.ToTable("fee_matter", (string)null);
                });

            modelBuilder.Entity("API.Models.Form", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("MatterTypeId")
                        .HasColumnType("int")
                        .HasColumnName("matter_type_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("form_pkey");

                    b.ToTable("form", (string)null);
                });

            modelBuilder.Entity("API.Models.FormField", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("form_field_PK");

                    b.ToTable("form_field", (string)null);
                });

            modelBuilder.Entity("API.Models.FormFieldMatter", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("FormFieldId")
                        .HasColumnType("int")
                        .HasColumnName("form_field_id");

                    b.Property<int>("MatterId")
                        .HasColumnType("int")
                        .HasColumnName("matter_id");

                    b.HasKey("Id")
                        .HasName("form_field_matter_PK");

                    b.ToTable("form_field_matter", (string)null);
                });

            modelBuilder.Entity("API.Models.Htmlfile", b =>
                {
                    b.Property<int>("TextId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Text_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TextId"));

                    b.Property<int?>("CustId")
                        .HasColumnType("int")
                        .HasColumnName("Cust_Id");

                    b.Property<string>("TextHtml")
                        .HasColumnType("ntext")
                        .HasColumnName("Text_Html");

                    b.Property<int?>("TextLawId")
                        .HasColumnType("int")
                        .HasColumnName("Text_Law_Id");

                    b.Property<string>("TextName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Text_name");

                    b.HasKey("TextId")
                        .HasName("PK__htmlfile__4F63CC2CC367CC44");

                    b.ToTable("htmlfiles", (string)null);
                });

            modelBuilder.Entity("API.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("BillToContactId")
                        .HasColumnType("int")
                        .HasColumnName("bill_to_contact_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<DateTime>("Due")
                        .HasColumnType("datetime")
                        .HasColumnName("due");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("money")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("money")
                        .HasColumnName("tax_amount");

                    b.Property<decimal>("Total")
                        .HasColumnType("money")
                        .HasColumnName("total");

                    b.HasKey("Id")
                        .HasName("invoice_pkey");

                    b.ToTable("invoice", (string)null);
                });

            modelBuilder.Entity("API.Models.InvoiceExpense", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money")
                        .HasColumnName("amount");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<int>("ExpenseId")
                        .HasColumnType("int")
                        .HasColumnName("expense_id");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("invoice_id");

                    b.HasKey("Id")
                        .HasName("invoice_expense_pkey");

                    b.ToTable("invoice_expense", (string)null);
                });

            modelBuilder.Entity("API.Models.InvoiceFee", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money")
                        .HasColumnName("amount");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<int>("FeeId")
                        .HasColumnType("int")
                        .HasColumnName("fee_id");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("invoice_id");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("money")
                        .HasColumnName("tax_amount");

                    b.HasKey("Id")
                        .HasName("invoice_fee_pkey");

                    b.HasIndex("FeeId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("invoice_fee", (string)null);
                });

            modelBuilder.Entity("API.Models.InvoiceTime", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("invoice_id");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("money")
                        .HasColumnName("price_per_unit");

                    b.Property<decimal>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(10, 4)")
                        .HasColumnName("quantity")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("TimeId")
                        .HasColumnType("int")
                        .HasColumnName("time_id");

                    b.HasKey("Id")
                        .HasName("invoice_time_pkey");

                    b.ToTable("invoice_time", (string)null);
                });

            modelBuilder.Entity("API.Models.Isuue", b =>
                {
                    b.Property<long>("IsuueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("IsuueID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IsuueId"));

                    b.Property<string>("AgnName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Agnaddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Agnphone")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContractNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("contractNumber");

                    b.Property<int?>("ContractType")
                        .HasColumnType("int")
                        .HasColumnName("contractType");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CustomerType")
                        .HasColumnType("int");

                    b.Property<string>("IsseName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IsuueDetail")
                        .HasColumnType("text");

                    b.Property<DateTime?>("IsuueOpenDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("IsuueStatus")
                        .HasColumnType("int");

                    b.Property<string>("IsuueSubject")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IsuueSummary")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("IsuueType")
                        .HasColumnType("int");

                    b.Property<string>("Isuuenumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("isuuenumber");

                    b.Property<string>("LowerName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IsuueId");

                    b.ToTable("Isuues");
                });

            modelBuilder.Entity("API.Models.IsuuesAgency", b =>
                {
                    b.Property<long>("AgenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("AgenceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AgenceId"));

                    b.Property<DateTime?>("AgenceDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AgenceFromDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AgenceName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("AgenceNo")
                        .HasColumnType("bigint");

                    b.Property<string>("AgenceNote")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AgencePic")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("AgenceTo")
                        .HasColumnType("datetime");

                    b.Property<int?>("AgenceType")
                        .HasColumnType("int");

                    b.Property<string>("IsuueNumber")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("AgenceId");

                    b.ToTable("Isuues_Agencies", (string)null);
                });

            modelBuilder.Entity("API.Models.IsuuesDatum", b =>
                {
                    b.Property<string>("AssessorName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CoureName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<string>("IsuueNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Lawer1")
                        .HasColumnType("int");

                    b.Property<int?>("Lawer2")
                        .HasColumnType("int");

                    b.Property<int?>("Lawer3")
                        .HasColumnType("int");

                    b.ToTable("Isuues_Data", (string)null);
                });

            modelBuilder.Entity("API.Models.IsuuesLokupTable", b =>
                {
                    b.Property<int>("LokupType")
                        .HasColumnType("int");

                    b.Property<int>("LokupId")
                        .HasColumnType("int");

                    b.Property<string>("LokupValue")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("LokupType", "LokupId")
                        .HasName("PK_LokupTable");

                    b.ToTable("Isuues_LokupTable", (string)null);
                });

            modelBuilder.Entity("API.Models.IsuuesRecord", b =>
                {
                    b.Property<int?>("EmpId")
                        .HasColumnType("int");

                    b.Property<string>("IsuueNumber")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("RecordDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RecordEmp")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RecordId"));

                    b.ToTable("Isuues_Record", (string)null);
                });

            modelBuilder.Entity("API.Models.IsuuesSession", b =>
                {
                    b.Property<long>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SessionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SessionId"));

                    b.Property<int?>("AisuueNumber")
                        .HasColumnType("int")
                        .HasColumnName("AIsuueNumber");

                    b.Property<int?>("CustomerInv")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SessionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SessionName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("SessionNextDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SessionNextName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SessionNote")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("SessionId");

                    b.ToTable("Isuues_Session", (string)null);
                });

            modelBuilder.Entity("API.Models.MatterType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("matter_type_pkey");

                    b.ToTable("matter_type", (string)null);
                });

            modelBuilder.Entity("API.Models.Name", b =>
                {
                    b.Property<long>("NameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("NAME_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NameId"));

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Contact_Phone_number");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_of_birth");

                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Home_phone");

                    b.Property<bool?>("InterpretorNeeded")
                        .HasColumnType("bit")
                        .HasColumnName("Interpretor_needed");

                    b.Property<int?>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sex")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Suburb")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Update_Date");

                    b.Property<long?>("WorkerId")
                        .HasColumnType("bigint")
                        .HasColumnName("WORKER_ID");

                    b.Property<string>("WorkerType")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Worker_Type");

                    b.Property<long?>("WorkerTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("Worker_Type_ID");

                    b.HasKey("NameId");

                    b.ToTable("Names");
                });

            modelBuilder.Entity("API.Models.NoteNotification", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("contact_id");

                    b.Property<int>("NoteId")
                        .HasColumnType("int")
                        .HasColumnName("note_id");

                    b.HasKey("Id")
                        .HasName("note_notification_pkey");

                    b.ToTable("note_notification", (string)null);
                });

            modelBuilder.Entity("API.Models.TaskTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("ActualEnd")
                        .HasColumnType("text")
                        .HasColumnName("actual_end");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DueDate")
                        .HasColumnType("text")
                        .HasColumnName("due_date");

                    b.Property<string>("ProjectedEnd")
                        .HasColumnType("text")
                        .HasColumnName("projected_end");

                    b.Property<string>("ProjectedStart")
                        .HasColumnType("text")
                        .HasColumnName("projected_start");

                    b.Property<string>("TaskTemplateTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("task_template_title");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("task_template_pkey");

                    b.ToTable("task_template", (string)null);
                });

            modelBuilder.Entity("API.Models.ExpenseMatter", b =>
                {
                    b.HasOne("API.Models.Expense", "Expense")
                        .WithMany("ExpenseMatters")
                        .HasForeignKey("ExpenseId")
                        .IsRequired()
                        .HasConstraintName("FK_expense_matter_ExpenseId");

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("API.Models.InvoiceFee", b =>
                {
                    b.HasOne("API.Models.Fee", "Fee")
                        .WithMany("InvoiceFees")
                        .HasForeignKey("FeeId")
                        .IsRequired()
                        .HasConstraintName("invoice_fee_fee_FeeId");

                    b.HasOne("API.Models.Invoice", "Invoice")
                        .WithMany("InvoiceFees")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("invoice_fee_invoice_InvoiceId");

                    b.Navigation("Fee");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("API.Models.Expense", b =>
                {
                    b.Navigation("ExpenseMatters");
                });

            modelBuilder.Entity("API.Models.Fee", b =>
                {
                    b.Navigation("InvoiceFees");
                });

            modelBuilder.Entity("API.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceFees");
                });
#pragma warning restore 612, 618
        }
    }
}
